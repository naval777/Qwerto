package com.naval.qwerto1;

import android.location.Location;
import android.os.AsyncTask;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListAdapter;
import android.widget.Toast;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.naval.qwerto.backend.userApi.UserApi;
import com.naval.qwerto.backend.userApi.model.User;

import java.io.IOException;
import java.util.logging.Logger;

public class MainActivity extends ActionBarActivity {


    /**
     * Name of the key for the shared preferences to access the current device
     * registration id for GCM.
     */
    private static final String PROPERTY_REG_ID = "registrationId";

    /**
     * Name of the key for the shared preferences to access the current
     * application version, to see if GCM registration id needs to be updated.
     */
    private static final String PROPERTY_APP_VERSION = "appVersion";

    /**
     * The class automatically generated by the Google App Engine backend
     * project, used to access the API easily from the Android application.
     * *
     */
    Logger LOG;
    public static final String TAG = "MainActivity";
    private GCMClientManager pushClientManager;
    String PROJECT_NUMBER = "631235813990";
    private String regid;
    Button mButton;
    EditText mName, mPhone;
    private UserApi UserInst;
    final String params[] = new String[2];

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        mButton = (Button) findViewById(R.id.button);
        mName = (EditText) findViewById(R.id.name);
        mPhone = (EditText) findViewById(R.id.phone);


        pushClientManager = new GCMClientManager(this, PROJECT_NUMBER);
        pushClientManager.registerIfNeeded(new GCMClientManager.RegistrationCompletedHandler() {
            @Override
            public void onSuccess(String registrationId, boolean isNewRegistration) {
             params[2] = registrationId;
                Toast.makeText(MainActivity.this, registrationId,
                        Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onFailure(String ex) {
                super.onFailure(ex);
                // If there is an error registering, don't just keep trying to register.
                // Require the user to click a button again, or perform
                // exponential back-off when retrying.yy
            }

        });

      /*  mButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
             params[0] = mName.getText().toString();
                params[1] = mPhone.getText().toString();
              sendRegistrationIdToBackend();
               //  new sendRegistrationToServer().execute(newUser);;
            }

        });

*/



    }
    /*
    public void registxyz(View v){
        params[0] = mName.getText().toString();
        params[1] = mPhone.getText().toString();
        sendRegistrationIdToBackend();

    }
*/

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    private void sendRegistrationIdToBackend() {
        UserInst = CloudEndpointsHelper.getEndpoints();
        User newUser= new User();
        newUser.setRegID(params[2]).setUname(params[1]).setPhone(params[0]);

        try {

            UserInst.insert(newUser).execute();
        } catch (IOException e) {

            // If there is an error, we will try again to register the
            // device with GCM the next time the MainActivity starts.
        }
    }

    private class sendRegistrationToServer
            extends AsyncTask<User, Void, Void> {

        protected Void doInBackground(final User... persons) {



            UserInst = CloudEndpointsHelper.getEndpoints();
            try {

                UserInst.insert(persons[0]).execute();
                // Persist the registration ID - no need to register again.
                //do it in shared preferences
            } catch (IOException e) {

                LOG.warning("Exception when sending registration ID to the "
                        + "backend = " + e.getMessage());
            }
            return null;
        }



    }
}